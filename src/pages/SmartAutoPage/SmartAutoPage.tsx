import { Section, Cell, List, Button, Text, Input, Checkbox } from '@telegram-apps/telegram-ui';
import { useState, useEffect } from 'react';
import type { FC } from 'react';

import { Page } from '@/components/Page.tsx';
import { bem } from '@/css/bem.ts';
import {
    fetchApiConfigsList
} from '@/services/apiConfigService';
import {
    fetchProducts,
    refreshJobs,
    startSmartAutoScheduled,
    runSmartAutoOnce,
    stopSmartAutoJob,
    type Product,
    type Category,
    type SmartAutoResponse,
    type Job
} from '@/services/smartAutoService';

import './SmartAutoPage.css';

const [, e] = bem('smart-auto-page');

interface ApiConfig {
    id: number;
    name: string;
    version: 'version_1' | 'version_2';
    domain: string;
    price_range_min?: number;
    price_range_max?: number;
    excluded_category_ids?: string;
    enabled: boolean;
}

export const SmartAutoPage: FC = () => {
    const [apiConfigsList, setApiConfigsList] = useState<ApiConfig[]>([]);
    const [selectedApiIds, setSelectedApiIds] = useState<number[]>([]);
    const [intervalSeconds, setIntervalSeconds] = useState('300');
    const [smartAutoJobs, setSmartAutoJobs] = useState<Job[]>([]);
    const [schedulerMode, setSchedulerMode] = useState(false);
    const [autoRunning, setAutoRunning] = useState(false);
    const [autoResults, setAutoResults] = useState<SmartAutoResponse | null>(null);
    const [availableProducts, setAvailableProducts] = useState<Record<number, Product[]>>({});
    const [, setAvailableCategories] = useState<Record<number, Category[]>>({});
    const [previewApiId, setPreviewApiId] = useState<number | null>(null);
    const [loadingProducts, setLoadingProducts] = useState<Record<number, boolean>>({});

    useEffect(() => {
        loadApiConfigsList();
        loadJobs();
    }, []);

    const loadApiConfigsList = async () => {
        try {
            const data = await fetchApiConfigsList();
            setApiConfigsList(data);
        } catch (err) {
            console.error('Error fetching API configs list:', err);
            setApiConfigsList([]);
        }
    };

    const loadJobs = async () => {
        try {
            const response = await refreshJobs();
            const allJobs = response.jobs || [];
            const smartJobs = allJobs.filter(job => job.id.startsWith('smart-auto-'));
            setSmartAutoJobs(smartJobs);
        } catch (err) {
            console.error('Error refreshing jobs:', err);
        }
    };

    const loadProducts = async (configId: number) => {
        try {
            setLoadingProducts(prev => ({ ...prev, [configId]: true }));
            const response = await fetchProducts(configId);
            setAvailableProducts(prev => ({
                ...prev,
                [configId]: response.products || []
            }));
            setAvailableCategories(prev => ({
                ...prev,
                [configId]: response.categories || []
            }));
        } catch (err) {
            console.error('Error fetching products:', err);
            alert(`L·ªói khi t·∫£i s·∫£n ph·∫©m: ${err}`);
        } finally {
            setLoadingProducts(prev => ({ ...prev, [configId]: false }));
        }
    };

    const handlePreviewProducts = async (configId: number) => {
        const config = apiConfigsList.find(c => c.id === configId);
        if (!config) return;

        if (!availableProducts[configId]) {
            await loadProducts(configId);
        }
        setPreviewApiId(previewApiId === configId ? null : configId);
    };

    const handleRunSmartAuto = async () => {
        if (selectedApiIds.length === 0) {
            alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt API ƒë·ªÉ ch·∫°y');
            return;
        }

        setAutoRunning(true);
        setAutoResults(null);

        try {
            const payload = {
                enabled_api_ids: selectedApiIds,
                check_interval_minutes: 5,
                interval_seconds: schedulerMode ? parseInt(intervalSeconds) : undefined,
                is_miniapp: true
            };

            if (schedulerMode) {
                const response = await startSmartAutoScheduled(payload);
                setAutoResults(response);
                await loadJobs(); // Refresh ƒë·ªÉ hi·ªÉn th·ªã job m·ªõi
                alert(`Smart Auto ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch! Job ID: ${response.job_id}`);
            } else {
                const response = await runSmartAutoOnce(payload);
                setAutoResults(response);

                if (response.status === 'completed') {
                    alert('Smart Auto ƒë√£ ho√†n th√†nh! Ki·ªÉm tra k·∫øt qu·∫£ b√™n d∆∞·ªõi.');
                } else {
                    alert(`Smart Auto: ${response.message}`);
                }
            }
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'C√≥ l·ªói x·∫£y ra khi ch·∫°y Smart Auto';
            alert(errorMessage);
            setAutoResults({
                status: 'error',
                message: errorMessage
            });
        } finally {
            setAutoRunning(false);
        }
    };

    const handleStopSmartAutoJob = async (jobId: string) => {
        try {
            await stopSmartAutoJob(jobId);
            alert('Smart Auto job ƒë√£ ƒë∆∞·ª£c d·ª´ng');
            await loadJobs();
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'L·ªói khi d·ª´ng Smart Auto job';
            alert(errorMessage);
            console.error('Error stopping Smart Auto job:', err);
        }
    };

    const handleApiSelection = (apiId: number, checked: boolean) => {
        if (checked) {
            setSelectedApiIds(prev => [...prev, apiId]);
            const config = apiConfigsList.find(c => c.id === apiId);
            if (config && config.version === 'version_2') {
                loadProducts(apiId);
            }
        } else {
            setSelectedApiIds(prev => prev.filter(id => id !== apiId));
        }
    };

    return (
        <Page>
            <List>
                <Section header="Smart Auto - Mua Clone Th√¥ng Minh">
                    <Cell className={e('description')}>
                        <Text>
                            H·ªá th·ªëng t·ª± ƒë·ªông ki·ªÉm tra t√†i nguy√™n, l·ªçc s·∫£n ph·∫©m theo ƒëi·ªÅu ki·ªán v√† ch·ªçn s·∫£n ph·∫©m t·ªët nh·∫•t ƒë·ªÉ mua.
                        </Text>
                    </Cell>
                </Section>

                <Section header="1. Ch·ªçn APIs ƒë·ªÉ ch·∫°y">
                    {apiConfigsList.map((config) => (
                        <Cell key={config.id} className={e('api-item')}>
                            <div className={e('api-content')}>
                                <div className={e('api-info')}>
                                    <Checkbox
                                        checked={selectedApiIds.includes(config.id)}
                                        onChange={(e) => handleApiSelection(config.id, e.target.checked)}
                                    />
                                    <div className={e('api-details')}>
                                        <Text className={e('api-name')}>{config.name}</Text>
                                        <Text className={e('api-version')}>
                                            {config.version === 'version_1' ? 'V1' : 'V2'} - {config.domain}
                                        </Text>
                                    </div>
                                </div>
                                <Button
                                    mode="outline"
                                    size="s"
                                    onClick={() => handlePreviewProducts(config.id)}
                                    disabled={loadingProducts[config.id]}
                                    className={e('preview-btn')}
                                >
                                    {loadingProducts[config.id] ? 'Loading...' : 'Xem SP'}
                                </Button>
                            </div>

                            {availableProducts[config.id] && (
                                <div className={e('product-stats')}>
                                    <Text className={e('stats-text')}>
                                        üì¶ {availableProducts[config.id].length} s·∫£n ph·∫©m,
                                        {availableProducts[config.id].filter(p => p.amount > 0).length} c√≤n h√†ng
                                    </Text>
                                </div>
                            )}
                        </Cell>
                    ))}
                </Section>

                {/* Product Preview Section */}
                {previewApiId && availableProducts[previewApiId] && (
                    <Section header={`üì¶ Preview: ${apiConfigsList.find(c => c.id === previewApiId)?.name}`}>
                        <Cell className={e('preview-section')}>
                            <div className={e('preview-content')}>
                                {/* Summary Stats */}
                                <div className={e('summary-stats')}>
                                    <Text className={e('summary-text')}>
                                        <strong>T·ªïng quan:</strong> {availableProducts[previewApiId].length} s·∫£n ph·∫©m, {availableProducts[previewApiId].filter(p => p.amount > 0).length} c√≤n h√†ng
                                    </Text>
                                    <Text className={e('summary-text')}>
                                        <strong>B·ªô l·ªçc c·ªßa API:</strong>
                                        {(() => {
                                            const config = apiConfigsList.find(c => c.id === previewApiId);
                                            if (!config) return ' Kh√¥ng c√≥ th√¥ng tin';

                                            let filterText = '';
                                            if (config.price_range_min || config.price_range_max) {
                                                filterText += ` Gi√° ${config.price_range_min || 0}-${config.price_range_max || '‚àû'}ƒë`;
                                            } else {
                                                filterText += ' Kh√¥ng gi·ªõi h·∫°n gi√°';
                                            }

                                            if (config.excluded_category_ids) {
                                                filterText += `, Lo·∫°i tr·ª´ categories: ${config.excluded_category_ids}`;
                                            } else {
                                                filterText += ', Kh√¥ng lo·∫°i tr·ª´ category n√†o';
                                            }

                                            return filterText;
                                        })()}
                                    </Text>
                                </div>

                                {/* Products List */}
                                <div className={e('products-list')}>
                                    <Text className={e('products-title')}>Danh s√°ch s·∫£n ph·∫©m:</Text>
                                    {availableProducts[previewApiId].map((product) => {
                                        const config = apiConfigsList.find(c => c.id === previewApiId);
                                        const isOutOfStock = product.amount <= 0;
                                        const isPriceFiltered = config && (
                                            (config.price_range_min && product.price < config.price_range_min) ||
                                            (config.price_range_max && product.price > config.price_range_max)
                                        );
                                        const isCategoryExcluded = config?.excluded_category_ids &&
                                            config.excluded_category_ids.split(',').map(s => s.trim()).includes(product.category_id);

                                        return (
                                            <div key={product.id} className={e('product-item')}>
                                                <div className={e('product-header')}>
                                                    <Text className={e('product-id')}>ID: {product.id}</Text>
                                                    <Text className={e('product-price')}>
                                                        {product.price}ƒë
                                                    </Text>
                                                </div>
                                                <Text className={e('product-name')}>
                                                    {product.name.substring(0, 60)}...
                                                </Text>
                                                <div className={e('product-details')}>
                                                    <Text className={e('product-category')}>
                                                        Category: {product.category_id} - {product.category_name}
                                                    </Text>
                                                    <Text className={e('product-stock')}>
                                                        C√≤n h√†ng: {product.amount}
                                                    </Text>
                                                </div>
                                                <div className={e('product-status')}>
                                                    {isOutOfStock ? (
                                                        <span className={e('status-badge', 'out-of-stock')}>H·∫øt h√†ng</span>
                                                    ) : isPriceFiltered ? (
                                                        <span className={e('status-badge', 'price-filtered')}>Gi√° kh√¥ng ph√π h·ª£p</span>
                                                    ) : isCategoryExcluded ? (
                                                        <span className={e('status-badge', 'category-excluded')}>Category b·ªã lo·∫°i tr·ª´</span>
                                                    ) : (
                                                        <span className={e('status-badge', 'available')}>‚úì Ph√π h·ª£p</span>
                                                    )}
                                                </div>
                                            </div>
                                        );
                                    })}
                                </div>
                            </div>
                        </Cell>
                    </Section>
                )}

                <Section header="2. C·∫•u h√¨nh ch·∫°y">
                    <Cell className={e('config-section')}>
                        <div className={e('info-box')}>
                            <Text>
                                üìù B·ªô l·ªçc ri√™ng bi·ªát: M·ªói API ƒë√£ c√≥ b·ªô l·ªçc ri√™ng (gi√°, categories) ƒë∆∞·ª£c c·∫•u h√¨nh trong ph·∫ßn "API Configs".
                                Smart Auto s·∫Ω s·ª≠ d·ª•ng b·ªô l·ªçc ri√™ng c·ªßa t·ª´ng API ƒë·ªÉ t√¨m s·∫£n ph·∫©m ph√π h·ª£p.
                            </Text>
                        </div>
                    </Cell>

                    <Cell className={e('config-section')}>
                        <div className={e('scheduler-config')}>
                            <Checkbox
                                checked={schedulerMode}
                                onChange={(e) => setSchedulerMode(e.target.checked)}
                            />
                            <Text>Ch·∫ø ƒë·ªô l√™n l·ªãch t·ª± ƒë·ªông</Text>
                        </div>
                    </Cell>

                    {schedulerMode && (
                        <Cell className={e('config-section')}>
                            <div className={e('interval-config')}>
                                <Text className={e('config-label')}>Kho·∫£ng th·ªùi gian (gi√¢y)</Text>
                                <Input
                                    value={intervalSeconds}
                                    onChange={(e) => setIntervalSeconds(e.target.value)}
                                    placeholder="300"
                                    type="number"
                                    min="60"
                                />
                                <Text className={e('config-help')}>
                                    T·ªëi thi·ªÉu 60 gi√¢y (khuy·∫øn ngh·ªã: 300s = 5 ph√∫t)
                                </Text>
                            </div>
                        </Cell>
                    )}

                    <Cell className={e('action-section')}>
                        <Button
                            mode="filled"
                            size="l"
                            onClick={handleRunSmartAuto}
                            disabled={autoRunning || selectedApiIds.length === 0}
                            className={e('run-btn')}
                        >
                            {autoRunning ? 'ƒêang x·ª≠ l√Ω...' :
                                schedulerMode ? 'L√™n l·ªãch Smart Auto' : 'Ch·∫°y Smart Auto ngay'}
                        </Button>
                    </Cell>
                </Section>

                {smartAutoJobs.length > 0 && (
                    <Section header="üìÖ Smart Auto Jobs ƒëang ch·∫°y">
                        {smartAutoJobs.map((job) => (
                            <Cell key={job.id} className={e('job-item')}>
                                <div className={e('job-content')}>
                                    <div className={e('job-info')}>
                                        <Text className={e('job-id')}>{job.id}</Text>
                                        <Text className={e('job-next')}>
                                            Next run: {job.next_run ? new Date(job.next_run).toLocaleString('vi-VN') : 'N/A'}
                                        </Text>
                                    </div>
                                    <Button
                                        mode="outline"
                                        size="s"
                                        onClick={() => handleStopSmartAutoJob(job.id)}
                                        className={e('stop-btn')}
                                    >
                                        D·ª´ng
                                    </Button>
                                </div>
                            </Cell>
                        ))}
                        <Cell className={e('refresh-section')}>
                            <Button
                                mode="outline"
                                size="m"
                                onClick={loadJobs}
                                className={e('refresh-btn')}
                            >
                                üîÑ Refresh Jobs
                            </Button>
                        </Cell>
                    </Section>
                )}

                {autoResults && (
                    <Section header="K·∫øt qu·∫£ Smart Auto">
                        <Cell className={e('results-section')}>
                            <div className={e('result-box', autoResults.status)}>
                                <Text>{autoResults.message}</Text>
                                {autoResults.job_id && (
                                    <Text className={e('job-id-text')}>
                                        Job ID: {autoResults.job_id}
                                    </Text>
                                )}
                            </div>
                        </Cell>
                    </Section>
                )}
            </List>
        </Page>
    );
};
